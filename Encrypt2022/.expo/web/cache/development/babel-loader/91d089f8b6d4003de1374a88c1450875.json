{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { PermissionStatus, EventEmitter, UnavailabilityError } from 'expo-modules-core';\nimport invariant from 'invariant';\nimport ExponentPedometer from \"./ExponentPedometer\";\nvar PedometerEventEmitter = new EventEmitter(ExponentPedometer);\nexport function watchStepCount(callback) {\n  return PedometerEventEmitter.addListener('Exponent.pedometerUpdate', callback);\n}\nexport function getStepCountAsync(_x, _x2) {\n  return _getStepCountAsync.apply(this, arguments);\n}\n\nfunction _getStepCountAsync() {\n  _getStepCountAsync = _asyncToGenerator(function* (start, end) {\n    if (!ExponentPedometer.getStepCountAsync) {\n      throw new UnavailabilityError('ExponentPedometer', 'getStepCountAsync');\n    }\n\n    invariant(start <= end, 'Pedometer: The start date must precede the end date.');\n    return yield ExponentPedometer.getStepCountAsync(start.getTime(), end.getTime());\n  });\n  return _getStepCountAsync.apply(this, arguments);\n}\n\nexport function isAvailableAsync() {\n  return _isAvailableAsync.apply(this, arguments);\n}\n\nfunction _isAvailableAsync() {\n  _isAvailableAsync = _asyncToGenerator(function* () {\n    return yield ExponentPedometer.isAvailableAsync();\n  });\n  return _isAvailableAsync.apply(this, arguments);\n}\n\nexport function getPermissionsAsync() {\n  return _getPermissionsAsync.apply(this, arguments);\n}\n\nfunction _getPermissionsAsync() {\n  _getPermissionsAsync = _asyncToGenerator(function* () {\n    if (!ExponentPedometer.getPermissionsAsync) {\n      return defaultPermissionsResponse;\n    } else {\n      return yield ExponentPedometer.getPermissionsAsync();\n    }\n  });\n  return _getPermissionsAsync.apply(this, arguments);\n}\n\nexport function requestPermissionsAsync() {\n  return _requestPermissionsAsync.apply(this, arguments);\n}\n\nfunction _requestPermissionsAsync() {\n  _requestPermissionsAsync = _asyncToGenerator(function* () {\n    if (!ExponentPedometer.requestPermissionsAsync) {\n      return defaultPermissionsResponse;\n    } else {\n      return yield ExponentPedometer.requestPermissionsAsync();\n    }\n  });\n  return _requestPermissionsAsync.apply(this, arguments);\n}\n\nvar defaultPermissionsResponse = {\n  granted: true,\n  expires: 'never',\n  canAskAgain: true,\n  status: PermissionStatus.GRANTED\n};\nexport { PermissionStatus };","map":{"version":3,"mappings":";AAAA,SAGEA,gBAHF,EAIEC,YAJF,EAMEC,mBANF,QAOO,mBAPP;AAQA,OAAOC,SAAP,MAAsB,WAAtB;AAEA,OAAOC,iBAAP;AAEA,IAAMC,qBAAqB,GAAG,IAAIJ,YAAJ,CAAiBG,iBAAjB,CAA9B;AAqBA,OAAM,SAAUE,cAAV,CAAyBC,QAAzB,EAA0D;EAC9D,OAAOF,qBAAqB,CAACG,WAAtB,CAAkC,0BAAlC,EAA8DD,QAA9D,CAAP;AACD;AAaD,gBAAsBE,iBAAtB;EAAA;AAAA;;;yCAAO,WAAiCC,KAAjC,EAA8CC,GAA9C,EAAuD;IAC5D,IAAI,CAACP,iBAAiB,CAACK,iBAAvB,EAA0C;MACxC,MAAM,IAAIP,mBAAJ,CAAwB,mBAAxB,EAA6C,mBAA7C,CAAN;IACD;;IACDC,SAAS,CAACO,KAAK,IAAIC,GAAV,EAAe,sDAAf,CAAT;IACA,aAAaP,iBAAiB,CAACK,iBAAlB,CAAoCC,KAAK,CAACE,OAAN,EAApC,EAAqDD,GAAG,CAACC,OAAJ,EAArD,CAAb;EACD,C;;;;AAQD,gBAAsBC,gBAAtB;EAAA;AAAA;;;wCAAO,aAA+B;IACpC,aAAaT,iBAAiB,CAACS,gBAAlB,EAAb;EACD,C;;;;AAGD,gBAAsBC,mBAAtB;EAAA;AAAA;;;2CAAO,aAAkC;IACvC,IAAI,CAACV,iBAAiB,CAACU,mBAAvB,EAA4C;MAC1C,OAAOC,0BAAP;IACD,CAFD,MAEO;MACL,aAAaX,iBAAiB,CAACU,mBAAlB,EAAb;IACD;EACF,C;;;;AAGD,gBAAsBE,uBAAtB;EAAA;AAAA;;;+CAAO,aAAsC;IAC3C,IAAI,CAACZ,iBAAiB,CAACY,uBAAvB,EAAgD;MAC9C,OAAOD,0BAAP;IACD,CAFD,MAEO;MACL,aAAaX,iBAAiB,CAACY,uBAAlB,EAAb;IACD;EACF,C;;;;AAED,IAAMD,0BAA0B,GAAuB;EACrDE,OAAO,EAAE,IAD4C;EAErDC,OAAO,EAAE,OAF4C;EAGrDC,WAAW,EAAE,IAHwC;EAIrDC,MAAM,EAAEpB,gBAAgB,CAACqB;AAJ4B,CAAvD;AAOA,SAA2CrB,gBAA3C","names":["PermissionStatus","EventEmitter","UnavailabilityError","invariant","ExponentPedometer","PedometerEventEmitter","watchStepCount","callback","addListener","getStepCountAsync","start","end","getTime","isAvailableAsync","getPermissionsAsync","defaultPermissionsResponse","requestPermissionsAsync","granted","expires","canAskAgain","status","GRANTED"],"sourceRoot":"","sources":["../src/Pedometer.ts"],"sourcesContent":["import {\n  PermissionExpiration,\n  PermissionResponse,\n  PermissionStatus,\n  EventEmitter,\n  Subscription,\n  UnavailabilityError,\n} from 'expo-modules-core';\nimport invariant from 'invariant';\n\nimport ExponentPedometer from './ExponentPedometer';\n\nconst PedometerEventEmitter = new EventEmitter(ExponentPedometer);\n\n// @needsAudit\nexport type PedometerResult = {\n  /**\n   * Number of steps taken between the given dates.\n   */\n  steps: number;\n};\n\n// @docsMissing\nexport type PedometerUpdateCallback = (result: PedometerResult) => void;\n\n// @needsAudit\n/**\n * Subscribe to pedometer updates.\n * @param callback A callback that is invoked when new step count data is available. The callback is\n * provided with a single argument that is [`PedometerResult`](#pedometerresult).\n * @return Returns a [`Subscription`](#subscription) that enables you to call\n * `remove()` when you would like to unsubscribe the listener.\n */\nexport function watchStepCount(callback: PedometerUpdateCallback): Subscription {\n  return PedometerEventEmitter.addListener('Exponent.pedometerUpdate', callback);\n}\n\n// @needsAudit\n/**\n * Get the step count between two dates.\n * @param start A date indicating the start of the range over which to measure steps.\n * @param end A date indicating the end of the range over which to measure steps.\n * @return Returns a promise that fulfills with a [`PedometerResult`](#pedometerresult).\n *\n * As [Apple documentation states](https://developer.apple.com/documentation/coremotion/cmpedometer/1613946-querypedometerdatafromdate?language=objc):\n * > Only the past seven days worth of data is stored and available for you to retrieve. Specifying\n * > a start date that is more than seven days in the past returns only the available data.\n */\nexport async function getStepCountAsync(start: Date, end: Date): Promise<PedometerResult> {\n  if (!ExponentPedometer.getStepCountAsync) {\n    throw new UnavailabilityError('ExponentPedometer', 'getStepCountAsync');\n  }\n  invariant(start <= end, 'Pedometer: The start date must precede the end date.');\n  return await ExponentPedometer.getStepCountAsync(start.getTime(), end.getTime());\n}\n\n// @needsAudit\n/**\n * Returns whether the pedometer is enabled on the device.\n * @return Returns a promise that fulfills with a `boolean`, indicating whether the pedometer is\n * available on this device.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  return await ExponentPedometer.isAvailableAsync();\n}\n\n// @docsMissing\nexport async function getPermissionsAsync(): Promise<PermissionResponse> {\n  if (!ExponentPedometer.getPermissionsAsync) {\n    return defaultPermissionsResponse;\n  } else {\n    return await ExponentPedometer.getPermissionsAsync();\n  }\n}\n\n// @docsMissing\nexport async function requestPermissionsAsync(): Promise<PermissionResponse> {\n  if (!ExponentPedometer.requestPermissionsAsync) {\n    return defaultPermissionsResponse;\n  } else {\n    return await ExponentPedometer.requestPermissionsAsync();\n  }\n}\n\nconst defaultPermissionsResponse: PermissionResponse = {\n  granted: true,\n  expires: 'never',\n  canAskAgain: true,\n  status: PermissionStatus.GRANTED,\n};\n\nexport { Subscription, PermissionResponse, PermissionStatus, PermissionExpiration };\n"]},"metadata":{},"sourceType":"module"}