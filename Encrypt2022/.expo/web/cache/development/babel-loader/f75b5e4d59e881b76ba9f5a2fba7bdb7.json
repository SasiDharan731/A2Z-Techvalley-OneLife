{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _wrapNativeSuper from \"@babel/runtime/helpers/wrapNativeSuper\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { PermissionStatus, Platform } from 'expo-modules-core';\nexport function getPermissionsAsync() {\n  return _getPermissionsAsync.apply(this, arguments);\n}\n\nfunction _getPermissionsAsync() {\n  _getPermissionsAsync = _asyncToGenerator(function* () {\n    var status = getRequestPermission() ? PermissionStatus.UNDETERMINED : isIOS() ? PermissionStatus.DENIED : PermissionStatus.GRANTED;\n    return {\n      status: status,\n      expires: 'never',\n      canAskAgain: true,\n      granted: status === PermissionStatus.GRANTED\n    };\n  });\n  return _getPermissionsAsync.apply(this, arguments);\n}\n\nexport function requestPermissionsAsync() {\n  return _requestPermissionsAsync.apply(this, arguments);\n}\n\nfunction _requestPermissionsAsync() {\n  _requestPermissionsAsync = _asyncToGenerator(function* () {\n    var status = yield askSensorPermissionAsync();\n    return {\n      status: status,\n      expires: 'never',\n      granted: status === PermissionStatus.GRANTED,\n      canAskAgain: false\n    };\n  });\n  return _requestPermissionsAsync.apply(this, arguments);\n}\n\nfunction askSensorPermissionAsync() {\n  return _askSensorPermissionAsync.apply(this, arguments);\n}\n\nfunction _askSensorPermissionAsync() {\n  _askSensorPermissionAsync = _asyncToGenerator(function* () {\n    var requestPermission = getRequestPermission();\n    if (!requestPermission) return PermissionStatus.GRANTED;\n    var status = yield requestPermission();\n\n    switch (status) {\n      case 'granted':\n        return PermissionStatus.GRANTED;\n\n      case 'denied':\n        return PermissionStatus.DENIED;\n\n      default:\n        return PermissionStatus.UNDETERMINED;\n    }\n  });\n  return _askSensorPermissionAsync.apply(this, arguments);\n}\n\nexport function getRequestPermission() {\n  var _DeviceMotionEvent, _DeviceOrientationEve;\n\n  if (!Platform.isDOMAvailable) {\n    return null;\n  }\n\n  if (typeof DeviceMotionEvent !== 'undefined' && !!((_DeviceMotionEvent = DeviceMotionEvent) != null && _DeviceMotionEvent.requestPermission)) {\n    return DeviceMotionEvent.requestPermission;\n  } else if (typeof DeviceOrientationEvent !== 'undefined' && !!((_DeviceOrientationEve = DeviceOrientationEvent) != null && _DeviceOrientationEve.requestPermission)) {\n    return DeviceOrientationEvent.requestPermission;\n  }\n\n  return null;\n}\n\nvar PermissionError = function (_Error) {\n  _inherits(PermissionError, _Error);\n\n  var _super = _createSuper(PermissionError);\n\n  function PermissionError(eventName) {\n    _classCallCheck(this, PermissionError);\n\n    var errorMessage = \"Cannot observe event: \" + eventName + \". How to fix:\";\n    errorMessage += \"\\n- Ensure you've requested the `MOTION` permission via expo-permissions (this must be done in a touch event).\";\n\n    if (location.protocol !== 'https:') {\n      errorMessage += '\\n- Ensure that you are hosting with `https` as DeviceMotion and DeviceOrientation are now secure APIs.';\n    }\n\n    if (isIOS() && !getRequestPermission()) {\n      errorMessage += '\\n- On iOS 12.2, you must manually enable device orientation in `Settings > Safari > Motion & Orientation Access`.';\n    }\n\n    return _super.call(this, errorMessage);\n  }\n\n  return _createClass(PermissionError);\n}(_wrapNativeSuper(Error));\n\nexport function assertSensorEventEnabledAsync(_x, _x2) {\n  return _assertSensorEventEnabledAsync.apply(this, arguments);\n}\n\nfunction _assertSensorEventEnabledAsync() {\n  _assertSensorEventEnabledAsync = _asyncToGenerator(function* (eventName, timeout) {\n    if (!Platform.isDOMAvailable) {\n      return false;\n    }\n\n    if (getRequestPermission()) {\n      if (yield isSensorEnabledAsync(eventName, timeout)) {\n        return true;\n      }\n\n      throw new PermissionError(eventName);\n    }\n\n    return true;\n  });\n  return _assertSensorEventEnabledAsync.apply(this, arguments);\n}\n\nexport function isSensorEnabledAsync(_x3) {\n  return _isSensorEnabledAsync.apply(this, arguments);\n}\n\nfunction _isSensorEnabledAsync() {\n  _isSensorEnabledAsync = _asyncToGenerator(function* (eventName) {\n    var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 250;\n\n    if (!Platform.isDOMAvailable) {\n      return false;\n    }\n\n    if (!isIOS && !getRequestPermission()) {\n      return true;\n    }\n\n    return new Promise(function (resolve) {\n      var id = setTimeout(function () {\n        window.removeEventListener(eventName, listener);\n        resolve(false);\n      }, timeout);\n\n      var listener = function listener() {\n        clearTimeout(id);\n        window.removeEventListener(eventName, listener);\n        resolve(true);\n      };\n\n      window.addEventListener(eventName, listener);\n    });\n  });\n  return _isSensorEnabledAsync.apply(this, arguments);\n}\n\nfunction isIOS() {\n  var isIOSUA = /(iPad|iPhone|iPod)/g.test(navigator.userAgent);\n  var isIE11 = !!window['MSStream'];\n  return isIOSUA && !isIE11;\n}","map":{"version":3,"mappings":"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","names":["PermissionStatus","Platform","getPermissionsAsync","status","getRequestPermission","UNDETERMINED","isIOS","DENIED","GRANTED","expires","canAskAgain","granted","requestPermissionsAsync","askSensorPermissionAsync","requestPermission","isDOMAvailable","DeviceMotionEvent","DeviceOrientationEvent","PermissionError","eventName","errorMessage","location","protocol","Error","assertSensorEventEnabledAsync","timeout","isSensorEnabledAsync","Promise","resolve","id","setTimeout","window","removeEventListener","listener","clearTimeout","addEventListener","isIOSUA","test","navigator","userAgent","isIE11"],"sourceRoot":"","sources":["../../src/utils/isSensorEnabledAsync.web.ts"],"sourcesContent":["import { PermissionResponse, PermissionStatus, Platform } from 'expo-modules-core';\n\ntype SensorEventName = 'deviceorientation' | 'devicemotion';\n\nexport async function getPermissionsAsync(): Promise<PermissionResponse> {\n  // We can infer from the requestor if this is an older browser.\n  const status = getRequestPermission()\n    ? PermissionStatus.UNDETERMINED\n    : isIOS()\n    ? PermissionStatus.DENIED\n    : PermissionStatus.GRANTED;\n  return {\n    status,\n    expires: 'never',\n    canAskAgain: true,\n    granted: status === PermissionStatus.GRANTED,\n  };\n}\n\nexport async function requestPermissionsAsync(): Promise<PermissionResponse> {\n  const status = await askSensorPermissionAsync();\n  return {\n    status,\n    expires: 'never',\n    granted: status === PermissionStatus.GRANTED,\n    canAskAgain: false,\n  };\n}\n\nasync function askSensorPermissionAsync(): Promise<PermissionStatus> {\n  const requestPermission = getRequestPermission();\n  // Technically this is incorrect because it doesn't account for iOS 12.2 Safari.\n  // But unfortunately we can only abstract so much.\n  if (!requestPermission) return PermissionStatus.GRANTED;\n\n  // If this isn't invoked in a touch-event then it never resolves.\n  // Safari probably should throw an error but because it doesn't we have no way of informing the developer.\n  const status = await requestPermission();\n  switch (status) {\n    case 'granted':\n      return PermissionStatus.GRANTED;\n    case 'denied':\n      return PermissionStatus.DENIED;\n    default:\n      return PermissionStatus.UNDETERMINED;\n  }\n}\n\n/**\n * Temporary solution until `tslib.d.ts` is updated to include the new DeviceOrientation/DeviceMotion API (as of 2021.10.26 it's not implemented completely, it's in experimental state).\n *\n * `typescript@4.4.4` is missing `requestPermission` described in\n * - https://w3c.github.io/deviceorientation/#deviceorientation\n * - https://w3c.github.io/deviceorientation/#devicemotion\n *\n * MDN docs does not describe this property as well:\n * - https://developer.mozilla.org/en-US/docs/Web/API/DeviceOrientationEvent\n * - https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEvent\n *\n * Below are just redefinitions of the existing typing available in the:\n * - https://github.com/microsoft/TypeScript/blob/01de6ff2ecdc6175727f7f999b887519d40ca115/lib/lib.dom.d.ts#L4216\n * - https://github.com/microsoft/TypeScript/blob/01de6ff2ecdc6175727f7f999b887519d40ca115/lib/lib.dom.d.ts#L4241.\n */\ndeclare let DeviceMotionEvent: {\n  prototype: DeviceMotionEvent;\n  new (type: string, eventInitDict?: DeviceMotionEventInit): DeviceMotionEvent;\n  requestPermission?: () => Promise<PermissionState>;\n};\n/**\n * See `DeviceMotionEvent` description a few lines above.\n */\ndeclare let DeviceOrientationEvent: {\n  prototype: DeviceOrientationEvent;\n  new (type: string, eventInitDict?: DeviceOrientationEventInit): DeviceOrientationEvent;\n  requestPermission?: () => Promise<PermissionState>;\n};\n\nexport function getRequestPermission(): (() => Promise<PermissionState>) | null {\n  if (!Platform.isDOMAvailable) {\n    return null;\n  }\n\n  if (typeof DeviceMotionEvent !== 'undefined' && !!DeviceMotionEvent?.requestPermission) {\n    return DeviceMotionEvent.requestPermission;\n  } else if (\n    typeof DeviceOrientationEvent !== 'undefined' &&\n    !!DeviceOrientationEvent?.requestPermission\n  ) {\n    return DeviceOrientationEvent.requestPermission;\n  }\n\n  return null;\n}\n\nclass PermissionError extends Error {\n  constructor(eventName: string) {\n    let errorMessage = `Cannot observe event: ${eventName}. How to fix:`;\n\n    errorMessage += `\\n- Ensure you've requested the \\`MOTION\\` permission via expo-permissions (this must be done in a touch event).`;\n\n    if (location.protocol !== 'https:') {\n      errorMessage +=\n        '\\n- Ensure that you are hosting with `https` as DeviceMotion and DeviceOrientation are now secure APIs.';\n    }\n    // is iOS and doesn't support requesting permissions, must be 12.2\n    if (isIOS() && !getRequestPermission()) {\n      errorMessage +=\n        '\\n- On iOS 12.2, you must manually enable device orientation in `Settings > Safari > Motion & Orientation Access`.';\n    }\n\n    super(errorMessage);\n  }\n}\n\n// iOS 12.2 disables DeviceMotion by default now\n// https://github.com/w3c/deviceorientation/issues/57\nexport async function assertSensorEventEnabledAsync(\n  eventName: SensorEventName,\n  timeout?: number\n): Promise<boolean> {\n  if (!Platform.isDOMAvailable) {\n    return false;\n  }\n\n  if (getRequestPermission()) {\n    if (await isSensorEnabledAsync(eventName, timeout)) {\n      return true;\n    }\n    throw new PermissionError(eventName);\n  }\n  return true;\n}\n\n// throw error if the sensor is disabled.\nexport async function isSensorEnabledAsync(\n  eventName: SensorEventName,\n  // Initial interval tests found results on a median of\n  // devicemotion:\n  // - iPhone 7 Plus: 166.6666753590107ms\n  // - iPhone X: 166.6666753590107ms\n  // deviceorientation:\n  // -\n  //\n  // The initial launch of iOS Safari onto a page calling this API seems to take a little longer than a regular call.\n  // devicemotion:\n  // - ~35ms\n  // deviceorientation:\n  // - ~45ms\n  //\n  timeout: number = 250\n): Promise<boolean> {\n  if (!Platform.isDOMAvailable) {\n    return false;\n  }\n\n  // If there is no method to request permission then the device has access to device motion.\n  // Older versions of iOS have no method but still disable motion so we should always check on iOS.\n  if (!isIOS && !getRequestPermission()) {\n    return true;\n  }\n\n  return new Promise((resolve) => {\n    const id = setTimeout(() => {\n      window.removeEventListener(eventName, listener);\n      resolve(false);\n    }, timeout);\n\n    const listener = (): void => {\n      clearTimeout(id);\n      window.removeEventListener(eventName, listener);\n      resolve(true);\n    };\n\n    window.addEventListener(eventName, listener);\n  });\n}\n\n// https://stackoverflow.com/a/9039885/4047926\nfunction isIOS(): boolean {\n  const isIOSUA = /(iPad|iPhone|iPod)/g.test(navigator.userAgent);\n  const isIE11 = !!window['MSStream'];\n  return isIOSUA && !isIE11;\n}\n"]},"metadata":{},"sourceType":"module"}